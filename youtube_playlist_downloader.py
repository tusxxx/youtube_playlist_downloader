#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
YouTube Playlist Downloader
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ —Å YouTube –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3
"""

import os
import sys
import argparse
import logging
from pathlib import Path
import yt_dlp
from yt_dlp.utils import DownloadError


class YouTubePlaylistDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ YouTube –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3"""
    
    def __init__(self, output_dir="downloads"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        
        Args:
            output_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        """
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('download.log', encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    def get_ydl_opts(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è yt-dlp"""
        return {
            'format': 'bestaudio/best',  # –°–∫–∞—á–∏–≤–∞–µ–º –ª—É—á—à–µ–µ –∞—É–¥–∏–æ
            'extractaudio': True,
            'audioformat': 'mp3',
            'audioquality': '192',  # –ö–∞—á–µ—Å—Ç–≤–æ MP3
            'outtmpl': str(self.output_dir / '%(playlist_title)s/%(title)s.%(ext)s'),
            'ignoreerrors': True,  # –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            'no_warnings': False,
            'writeinfojson': False,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            'writethumbnail': False,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—ã
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
        }
    
    def download_playlist(self, playlist_url):
        """
        –°–∫–∞—á–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç —Å YouTube
        
        Args:
            playlist_url (str): URL –ø–ª–µ–π–ª–∏—Å—Ç–∞ YouTube
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            self.logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {playlist_url}")
            
            with yt_dlp.YoutubeDL(self.get_ydl_opts()) as ydl:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ
                playlist_info = ydl.extract_info(playlist_url, download=False)
                playlist_title = playlist_info.get('title', 'Unknown Playlist')
                video_count = len(playlist_info.get('entries', []))
                
                self.logger.info(f"–ü–ª–µ–π–ª–∏—Å—Ç: {playlist_title}")
                self.logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {video_count}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
                ydl.download([playlist_url])
                
                self.logger.info("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                return True
                
        except DownloadError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return False
        except Exception as e:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    def download_single_video(self, video_url):
        """
        –°–∫–∞—á–∞—Ç—å –æ–¥–Ω–æ –≤–∏–¥–µ–æ —Å YouTube
        
        Args:
            video_url (str): URL –≤–∏–¥–µ–æ YouTube
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            self.logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {video_url}")
            
            opts = self.get_ydl_opts()
            opts['outtmpl'] = str(self.output_dir / '%(title)s.%(ext)s')
            
            with yt_dlp.YoutubeDL(opts) as ydl:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                video_info = ydl.extract_info(video_url, download=False)
                video_title = video_info.get('title', 'Unknown Video')
                
                self.logger.info(f"–í–∏–¥–µ–æ: {video_title}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                ydl.download([video_url])
                
                self.logger.info("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                return True
                
        except DownloadError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return False
        except Exception as e:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    parser = argparse.ArgumentParser(
        description='–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏ –≤–∏–¥–µ–æ —Å YouTube –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python youtube_playlist_downloader.py "https://www.youtube.com/playlist?list=PLrAXtmRdbe-1qVs"
  python youtube_playlist_downloader.py "https://youtu.be/dQw4w9WgXcQ" -o "my_music"
  python youtube_playlist_downloader.py -u "https://www.youtube.com/playlist?list=PLrAXtmRdbe-1qVs" -o "downloads"
        """
    )
    
    parser.add_argument(
        'url',
        nargs='?',
        help='URL –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–ª–∏ –≤–∏–¥–µ–æ YouTube'
    )
    
    parser.add_argument(
        '-u', '--url',
        dest='url_arg',
        help='URL –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–ª–∏ –≤–∏–¥–µ–æ YouTube (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)'
    )
    
    parser.add_argument(
        '-o', '--output',
        default='downloads',
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: downloads)'
    )
    
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL
    url = args.url or args.url_arg
    
    if not url:
        print("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å URL –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–ª–∏ –≤–∏–¥–µ–æ!")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -h –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø—Ä–∞–≤–∫–∏.")
        sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    downloader = YouTubePlaylistDownloader(args.output)
    
    print(f"üéµ YouTube Playlist Downloader")
    print(f"üìÅ –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {args.output}")
    print(f"üîó URL: {url}")
    print("-" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø URL –∏ —Å–∫–∞—á–∏–≤–∞–µ–º
    if 'playlist' in url:
        success = downloader.download_playlist(url)
    else:
        success = downloader.download_single_video(url)
    
    if success:
        print("\n‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {os.path.abspath(args.output)}")
    else:
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏!")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª download.log –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
        sys.exit(1)


if __name__ == "__main__":
    main() 